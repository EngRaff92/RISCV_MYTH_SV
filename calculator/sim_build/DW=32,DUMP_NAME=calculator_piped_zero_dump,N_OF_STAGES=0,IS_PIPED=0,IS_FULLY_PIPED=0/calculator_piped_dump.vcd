$date
	Thu Jun  2 20:34:54 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module calculator_piped $end
$var wire 1 ! calc_clock $end
$var wire 1 " calc_rst $end
$var wire 1 # different $end
$var wire 32 $ op_in1 [31:0] $end
$var wire 32 % op_in2 [31:0] $end
$var wire 1 & op_in_sel $end
$var wire 3 ' opcode [2:0] $end
$var wire 1 ( overflow_pipe $end
$var wire 1 ) valid_res $end
$var wire 64 * sampled_res [63:0] $end
$var wire 32 + root_out_pipe [31:0] $end
$var wire 32 , root_out [31:0] $end
$var wire 64 - result [63:0] $end
$var wire 64 . place_h_res_pipe [63:0] $end
$var wire 3 / opcode_pipe [2:0] $end
$var wire 1 0 op_in_sel_pipe $end
$var wire 32 1 op_in2_pipe [31:0] $end
$var wire 32 2 op_in1_pipe [31:0] $end
$var wire 1 3 int_valid $end
$var reg 1 ( overflow $end
$var reg 64 4 place_h_res [63:0] $end
$scope begin genblk2 $end
$upscope $end
$scope begin genblk4 $end
$upscope $end
$scope begin genblk6 $end
$upscope $end
$scope module u_ff_sampling $end
$var wire 1 ! ff_clk $end
$var wire 1 5 ff_en $end
$var wire 64 6 ff_in_d [63:0] $end
$var wire 64 7 ff_out_not_q [63:0] $end
$var wire 64 8 ff_out_q [63:0] $end
$var wire 1 " ff_rst $end
$var wire 1 9 l_clk $end
$var reg 64 : q [63:0] $end
$scope begin proc_ip_calculation $end
$upscope $end
$upscope $end
$scope module u_sqrt_c $end
$var wire 32 ; op_in [31:0] $end
$var wire 32 < op_out [31:0] $end
$var reg 32 = a [31:0] $end
$var reg 18 > l [17:0] $end
$var reg 16 ? q [15:0] $end
$var reg 18 @ r [17:0] $end
$var reg 18 A re [17:0] $end
$var integer 32 B i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10000 B
b111111111111111111 A
b11 @
b0 ?
b111111111111111100 >
b0 =
b0 <
b0 ;
bx :
09
bx 8
bx 7
b0 6
15
b0 4
13
b0 2
b0 1
00
b0 /
b0 .
bx -
b0 ,
b0 +
bx *
1)
0(
b0 '
0&
b0 %
b0 $
0#
0"
0!
$end
#10
b0 -
b1111111111111111111111111111111111111111111111111111111111111111 7
b0 *
b0 8
b0 :
1"
#20
0"
19
1!
#25
b101 ,
b101 <
b101 ?
b1010 A
b1011 @
b111111111111111111 >
b10000 B
b0 =
b1000100 .
b1000100 6
b1000100 4
b100011 ;
b1 /
b1 '
b100011 2
b100011 $
b100001 1
b100001 %
10
1&
09
0!
#30
b1000100 -
b1111111111111111111111111111111111111111111111111111111110111011 7
b1000100 *
b1000100 8
b1000100 :
19
1!
#35
09
0!
#40
19
1!
#45
09
0!
#50
19
1!
#55
09
0!
#60
19
1!
#65
b111111111111111110 A
b1101 @
b1011 >
b10000 B
b110 ,
b110 <
b110 ?
b0 =
b1000110100 .
b1000110100 6
b1000110100 4
b101111 ;
b10 /
b10 '
b1100 2
b1100 $
b101111 1
b101111 %
00
0&
09
0!
#70
b1000110100 -
b1111111111111111111111111111111111111111111111111111110111001011 7
b1000110100 *
b1000110100 8
b1000110100 :
19
1!
#75
09
0!
#80
19
1!
#85
09
0!
#90
19
1!
#95
09
0!
#100
19
1!
#105
b0 -
0)
03
05
b111111111111111110 A
b1011 @
b111111111111110011 >
b10000 B
b100 ,
b100 <
b100 ?
b0 =
1(
b11111111111111111111111111111100 .
b11111111111111111111111111111100 6
b11111111111111111111111111111100 4
b10111 ;
b11 /
b11 '
b10111 2
b10111 $
b11011 1
b11011 %
10
1&
09
0!
#110
19
1!
#115
09
0!
#120
19
1!
#125
09
0!
#130
19
1!
#135
09
0!
#140
19
1!
#145
b1000110100 -
1)
13
15
b110 +
b111111111111111100 A
b1101 @
b1001 >
b10000 B
b110 ,
b110 <
b110 ?
b0 =
0(
b110 .
b110 6
b110 4
b101101 ;
b100 /
b100 '
b111 2
b111 $
b101101 1
b101101 %
00
0&
09
0!
#150
b110 -
b1111111111111111111111111111111111111111111111111111111111111001 7
b110 *
b110 8
b110 :
19
1!
#155
09
0!
#160
19
1!
#165
09
0!
#170
19
1!
#175
09
0!
#180
19
1!
#185
b0 +
b111111111111111111 A
b1101 @
b1100 >
b10000 B
b110 ,
b110 <
b110 ?
b0 =
b0 .
b0 6
b0 4
b110000 ;
b101 /
b101 '
b110000 2
b110000 $
b1110 1
b1110 %
10
1&
09
0!
#190
b0 -
b1111111111111111111111111111111111111111111111111111111111111111 7
b0 *
b0 8
b0 :
19
1!
#195
09
0!
#200
19
1!
#205
09
0!
#210
19
1!
#215
09
0!
#220
19
1!
#221
